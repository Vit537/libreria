name: Deploy to Google Cloud (Storage + Run)

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  BACKEND_SERVICE: libreria-backend
  FRONTEND_BUCKET: ${{ secrets.GCP_PROJECT_ID }}-frontend

jobs:
  deploy-backend:
    name: Deploy Backend to Cloud Run
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Backend Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/libreria/backend:${{ github.sha }} \
                       -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/libreria/backend:latest \
                       ./backend

      - name: Push Backend image to Artifact Registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/libreria/backend:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/libreria/backend:latest

      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/libreria/backend:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars "DEBUG=False" \
            --set-env-vars "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" \
            --set-env-vars "DB_NAME=${{ secrets.DB_NAME }}" \
            --set-env-vars "DB_USER=${{ secrets.DB_USER }}" \
            --set-env-vars "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --set-env-vars "DB_HOST=${{ secrets.DB_HOST }}" \
            --set-env-vars "DB_PORT=5432" \
            --set-env-vars "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" \
            --set-env-vars "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
            --add-cloudsql-instances ${{ secrets.CLOUD_SQL_CONNECTION_NAME }} \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10

      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $BACKEND_URL"

    outputs:
      backend_url: ${{ steps.backend-url.outputs.url }}

  deploy-frontend:
    name: Deploy Frontend to Cloud Storage
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build Next.js (Static Export)
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.backend_url }}
          NEXT_OUTPUT_MODE: export
          NODE_ENV: production
        run: |
          npm run build
          # Para static export, Next.js genera la carpeta 'out'
          ls -la

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create bucket if not exists
        run: |
          if ! gsutil ls -b gs://${{ env.FRONTEND_BUCKET }} > /dev/null 2>&1; then
            echo "Creating bucket..."
            gsutil mb -p ${{ env.PROJECT_ID }} -c STANDARD -l ${{ env.REGION }} gs://${{ env.FRONTEND_BUCKET }}
            
            # Configurar bucket como pÃºblico
            gsutil iam ch allUsers:objectViewer gs://${{ env.FRONTEND_BUCKET }}
            
            # Configurar como website
            gsutil web set -m index.html -e 404.html gs://${{ env.FRONTEND_BUCKET }}
            
            # Configurar CORS
            echo '[{"origin":["*"],"method":["GET","HEAD"],"responseHeader":["Content-Type"],"maxAgeSeconds":3600}]' > cors.json
            gsutil cors set cors.json gs://${{ env.FRONTEND_BUCKET }}
            rm cors.json
          else
            echo "Bucket already exists"
          fi

      - name: Upload to Cloud Storage
        working-directory: ./frontend
        run: |
          # Subir archivos estÃ¡ticos con cache largo
          if [ -d "out" ]; then
            # Para static export (carpeta 'out')
            gsutil -m -h "Cache-Control:public, max-age=31536000, immutable" \
              rsync -r -d out/_next gs://${{ env.FRONTEND_BUCKET }}/_next
            
            # HTML y otros archivos sin cache largo
            gsutil -m -h "Cache-Control:public, max-age=3600" \
              rsync -r -d -x ".*/_next/.*" out/ gs://${{ env.FRONTEND_BUCKET }}/
          fi

      - name: Set cache headers for static assets
        run: |
          # Cache largo para archivos estÃ¡ticos versionados
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" \
            "gs://${{ env.FRONTEND_BUCKET }}/_next/**"

      - name: Get Frontend URL
        run: |
          FRONTEND_URL="https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"
          echo "Frontend URL: $FRONTEND_URL"
          echo "TambiÃ©n disponible en: http://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
      - name: Print Summary
        run: |
          echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend (Cloud Run)" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ needs.deploy-backend.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.BACKEND_SERVICE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend (Cloud Storage)" >> $GITHUB_STEP_SUMMARY
          echo "- **Bucket**: gs://${{ env.FRONTEND_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Update CORS_ALLOWED_ORIGINS in Django to include the frontend URL" >> $GITHUB_STEP_SUMMARY
          echo "2. (Optional) Configure Cloud CDN for better performance" >> $GITHUB_STEP_SUMMARY
          echo "3. (Optional) Configure custom domain" >> $GITHUB_STEP_SUMMARY
